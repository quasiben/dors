% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbi-dors-driver.R, R/dbi-dors-connection.R,
%   R/dbi-dors-result.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{DORSDriver-class}
\alias{show,DORSDriver-method}
\alias{dbConnect,DORSDriver-method}
\alias{dbDataType,DORSDriver,ANY-method}
\alias{dbDataType,DORSDriver,list-method}
\alias{dbGetInfo,DORSDriver-method}
\alias{DORSConnection-class}
\alias{show,DORSConnection-method}
\alias{dbIsValid,DORSConnection-method}
\alias{dbDisconnect,DORSConnection-method}
\alias{dbSendQuery,DORSConnection,character-method}
\alias{dbSendStatement,DORSConnection,character-method}
\alias{dbDataType,DORSConnection,ANY-method}
\alias{dbQuoteString,DORSConnection,character-method}
\alias{dbQuoteIdentifier,DORSConnection,character-method}
\alias{dbWriteTable,DORSConnection,character,data.frame-method}
\alias{dbWriteTable,DORSConnection,character,character-method}
\alias{dbReadTable,DORSConnection,character-method}
\alias{dbListTables,DORSConnection-method}
\alias{dbExistsTable,DORSConnection,character-method}
\alias{dbListFields,DORSConnection,character-method}
\alias{dbRemoveTable,DORSConnection,character-method}
\alias{dbGetInfo,DORSConnection-method}
\alias{dbBegin,DORSConnection-method}
\alias{dbCommit,DORSConnection-method}
\alias{dbRollback,DORSConnection-method}
\alias{DORSResult-class}
\alias{show,DORSResult-method}
\alias{dbClearResult,DORSResult-method}
\alias{dbFetch,DORSResult-method}
\alias{dbHasCompleted,DORSResult-method}
\alias{dbGetInfo,DORSResult-method}
\alias{dbIsValid,DORSResult-method}
\alias{dbGetStatement,DORSResult-method}
\alias{dbColumnInfo,DORSResult-method}
\alias{dbGetRowCount,DORSResult-method}
\alias{dbGetRowsAffected,DORSResult-method}
\alias{dbBind,DORSResult-method}
\title{DBI methods}
\usage{
\S4method{show}{DORSDriver}(object)

\S4method{dbConnect}{DORSDriver}(drv, CTX = "dask", SCHEDULER = FALSE)

\S4method{dbDataType}{DORSDriver,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{DORSDriver,list}(dbObj, obj, ...)

\S4method{dbGetInfo}{DORSDriver}(dbObj, ...)

\S4method{show}{DORSConnection}(object)

\S4method{dbIsValid}{DORSConnection}(dbObj, ...)

\S4method{dbDisconnect}{DORSConnection}(conn, ...)

\S4method{dbSendQuery}{DORSConnection,character}(conn, statement, ...)

\S4method{dbSendStatement}{DORSConnection,character}(conn, statement, ...)

\S4method{dbDataType}{DORSConnection,ANY}(dbObj, obj, ...)

\S4method{dbQuoteString}{DORSConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{DORSConnection,character}(conn, x, ...)

\S4method{dbWriteTable}{DORSConnection,character,data.frame}(conn, name, value, overwrite = FALSE, append = FALSE, ...)

\S4method{dbWriteTable}{DORSConnection,character,character}(conn, name, value, overwrite = FALSE, append = FALSE, ...)

\S4method{dbReadTable}{DORSConnection,character}(conn, name, ...)

\S4method{dbListTables}{DORSConnection}(conn, ...)

\S4method{dbExistsTable}{DORSConnection,character}(conn, name, ...)

\S4method{dbListFields}{DORSConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{DORSConnection,character}(conn, name, ...)

\S4method{dbGetInfo}{DORSConnection}(dbObj, ...)

\S4method{dbBegin}{DORSConnection}(conn, ...)

\S4method{dbCommit}{DORSConnection}(conn, ...)

\S4method{dbRollback}{DORSConnection}(conn, ...)

\S4method{show}{DORSResult}(object)

\S4method{dbClearResult}{DORSResult}(res, ...)

\S4method{dbFetch}{DORSResult}(res, n = -1, ...)

\S4method{dbHasCompleted}{DORSResult}(res, ...)

\S4method{dbGetInfo}{DORSResult}(dbObj, ...)

\S4method{dbIsValid}{DORSResult}(dbObj, ...)

\S4method{dbGetStatement}{DORSResult}(res, ...)

\S4method{dbColumnInfo}{DORSResult}(res, ...)

\S4method{dbGetRowCount}{DORSResult}(res, ...)

\S4method{dbGetRowsAffected}{DORSResult}(res, ...)

\S4method{dbBind}{DORSResult}(res, params, ...)
}
\arguments{
\item{object}{Any R object}

\item{drv}{an object that inherits from \linkS4class{DBIDriver},
or an existing \linkS4class{DBIConnection}
object (in order to clone an existing connection).}

\item{CTX}{character (dask or blazing)}

\item{SCHEDULER}{character External SCHEDULER (default: FALSE)}

\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
or \linkS4class{DBIConnection}}

\item{obj}{An R object whose SQL type we want to determine.}

\item{...}{authentication arguments needed by the DBMS instance; these
typically include \code{user}, \code{password}, \code{host}, \code{port}, \code{dbname}, etc.
For details see the appropriate \code{DBIDriver}.}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{statement}{a character string containing SQL.}

\item{x}{A character vector to quote as string.}

\item{name}{A character string specifying the unquoted DBMS table name,
or the result of a call to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{Allow overwriting the destination table. Cannot be
\code{TRUE} if \code{append} is also \code{TRUE}.}

\item{append}{Allow appending to the destination table. Cannot be
\code{TRUE} if \code{overwrite} is also \code{TRUE}.}

\item{res}{An object inheriting from \linkS4class{DBIResult}.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{params}{A list of bindings, named or unnamed.}
}
\description{
Implementations of pure virtual functions defined in the \code{DBI} package.
}
